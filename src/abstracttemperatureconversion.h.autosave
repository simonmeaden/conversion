/**
 ** This file is part of the ConversionUtility project.
 ** Copyright 2016 Simon Meaden <simonmeaden@smelecomp.co.uk>.
 **
 ** This program is free software: you can redistribute it and/or modify
 ** it under the terms of the GNU General Public License as published by
 ** the Free Software Foundation, either version 3 of the License, or
 ** (at your option) any later version.
 **
 ** This program is distributed in the hope that it will be useful,
 ** but WITHOUT ANY WARRANTY; without even the implied warranty of
 ** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 ** GNU General Public License for more details.
 **
 ** You should have received a copy of the GNU General Public License
 ** along with this program.  If not, see <http://www.gnu.org/licenses/>.
 **/
#ifndef ABSTRACTTEMPERATURECONVERSION_H
#define ABSTRACTTEMPERATURECONVERSION_H

#include <QObject>

#include "conversion_global.h"
#include "abstractconversion.h"

#if defined(DISABLE_CONVERSION_NAMESPACE)
QT_BEGIN_NAMESPACE_CONVERSION
#else
namespace Conversion {
#endif

/*!
    \class AbstractTemperatureConversion

    \brief Base class for temperature conversions

    This handles most of the actual conversion but individual sub classes in
    plugin projects must supply names, symbols, the type (\a Temperature) and
    ranges for the plugin.

    \author Simon Meaden
    \date   16 July 2016
*/
class AbstractTemperatureConversion : public AbstractConversion {
    public:
        AbstractTemperatureConversion(
                const QString &name,
                const QString &symbol,
                const QString &tooltip = QString() );

        virtual mpf_class convert( const shared_conversion_t &from, const qreal &value ) const;
        virtual QString toString( const shared_conversion_t &from, const qreal &value, const bool &showSymbol = false ) const;

        double absolute();

    protected:
        double mAbsoluteValue;

        mpf_class fromKelvin( const qreal &value ) const;
        mpf_class fromCelsius(const qreal &value ) const;
        mpf_class fromRankine( const qreal &value ) const;
        mpf_class fromFahrenheit( const qreal &value ) const;
        mpf_class fromDelisle( const qreal &value ) const;
        mpf_class fromRomer( const qreal &value ) const;
        mpf_class fromReaumur( const qreal &value ) const;
        mpf_class fromNewton( const qreal &value ) const;


};
typedef QSharedPointer<AbstractTemperatureConversion> shared_temperature_conversion_t;

QT_END_NAMESPACE_CONVERSION

#endif // ABSTRACTTEMPERATURECONVERSION_H
